name: Presale Contract Deployment

on:
  pull_request:
    branches: [develop, main]
    types: [closed]
    paths:
      - 'contracts/PreSaleOnChain.sol'
      - 'scripts/deploy-presale.js'
      - 'test/**'
      - 'hardhat.config.js'

env:
  NODE_VERSION: '18'

jobs:
  test-and-security:
    name: Tests & Security Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run tests
        run: npx hardhat test

      - name: Generate gas report
        run: REPORT_GAS=true npx hardhat test
        continue-on-error: true

      - name: Run Slither security analysis
        uses: crytic/slither-action@v0.3.0
        with:
          slither-args: '--filter-paths "node_modules/|test/" --exclude naming-convention,external-function,low-level-calls --include-paths "contracts/PreSaleOnChain.sol"'
        continue-on-error: true

      - name: Install Mythril
        run: pip install mythril
        continue-on-error: true

      - name: Run Mythril analysis
        run: |
          echo "Running Mythril security analysis on PreSaleOnChain..."
          myth analyze contracts/PreSaleOnChain.sol --solv 0.8.20 --max-depth 8 || echo "Mythril analysis completed with warnings"
        continue-on-error: true

      - name: Security check summary
        run: |
          echo "## Security Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Slither static analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Mythril symbolic execution" >> $GITHUB_STEP_SUMMARY
          echo "- All tests passed" >> $GITHUB_STEP_SUMMARY

  deploy-testnet:
    name: Deploy to Polygon Amoy (Testnet)
    runs-on: ubuntu-latest
    needs: test-and-security
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.base.ref == 'develop'
    environment: testnet
    
    outputs:
      presale-address: ${{ steps.deploy.outputs.presale-address }}
      deployment-block: ${{ steps.deploy.outputs.deployment-block }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Presale to Polygon Amoy
        id: deploy
        run: |
          echo "Deploying Presale Contract to Polygon Amoy..."
          
          # Run deployment script (auto-detects Polygon and deploys presale)
          OUTPUT=$(npx hardhat run scripts/deploy.js --network polygonAmoy)
          echo "$OUTPUT"
          
          # Extract contract address from output
          PRESALE_ADDRESS=$(echo "$OUTPUT" | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
          
          if [ -z "$PRESALE_ADDRESS" ]; then
            echo "Failed to extract presale address"
            exit 1
          fi
          
          echo "Presale deployed to: $PRESALE_ADDRESS"
          
          # Get deployment block
          BLOCK_NUMBER=$(npx hardhat run --network polygonAmoy -e "console.log(await ethers.provider.getBlockNumber())")
          
          # Set outputs
          echo "presale-address=$PRESALE_ADDRESS" >> $GITHUB_OUTPUT
          echo "deployment-block=$BLOCK_NUMBER" >> $GITHUB_OUTPUT
          
          # Set environment variables for next steps
          echo "PRESALE_ADDRESS=$PRESALE_ADDRESS" >> $GITHUB_ENV
          echo "DEPLOYMENT_BLOCK=$BLOCK_NUMBER" >> $GITHUB_ENV
        env:
          POLYGON_DEPLOYER_PRIVATE_KEY: ${{ secrets.POLYGON_DEPLOYER_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
          RECORDER_ADDRESS: ${{ secrets.RECORDER_ADDRESS }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

      - name: Verify contract on Polygonscan
        run: |
          echo "Verifying contract on Polygonscan..."
          sleep 30  # Wait for contract to be indexed
          
          npx hardhat verify --network polygonAmoy $PRESALE_ADDRESS ${{ secrets.RECORDER_ADDRESS }} || {
            echo "Verification failed, but deployment succeeded"
            echo "Manual verification may be required"
          }
        env:
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        continue-on-error: true

      - name: Save deployment info
        run: |
          echo "Saving deployment information..."
          
          # Create deployment directory
          mkdir -p deployments/amoy
          
          # Create deployment record
          cat > deployments/amoy/presale-deployment.json << EOF
          {
            "contractAddress": "$PRESALE_ADDRESS",
            "network": "polygonAmoy",
            "chainId": 80002,
            "deploymentBlock": $DEPLOYMENT_BLOCK,
            "deploymentDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "GitHub Actions",
            "recorderAddress": "${{ secrets.RECORDER_ADDRESS }}",
            "gasOptimized": true,
            "features": [
              "SafeERC20 transfers",
              "Role-based access control", 
              "Gas-optimized receipts (2 slots)",
              "Referral system (7% + 5%)",
              "Stage-based pricing",
              "Emergency controls"
            ]
          }
          EOF
          
          # Also create env file for easy sourcing
          echo "PRESALE_ADDRESS=$PRESALE_ADDRESS" > deployments/amoy/addresses.env
          echo "DEPLOYMENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployments/amoy/addresses.env
          echo "DEPLOYMENT_BLOCK=$DEPLOYMENT_BLOCK" >> deployments/amoy/addresses.env
          
          # Commit back to develop branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions Bot"
          git add deployments/
          git commit -m "Testnet presale deployment: $PRESALE_ADDRESS" || echo "No changes to commit"
          git push origin develop || echo "Nothing to push"

      - name: Create deployment summary
        run: |
          echo "## Testnet Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Presale Contract:** [\`$PRESALE_ADDRESS\`](https://amoy.polygonscan.com/address/$PRESALE_ADDRESS)" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Polygon Amoy Testnet (Chain ID: 80002)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Block:** $DEPLOYMENT_BLOCK" >> $GITHUB_STEP_SUMMARY
          echo "**Recorder Address:** \`${{ secrets.RECORDER_ADDRESS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Features Deployed:**" >> $GITHUB_STEP_SUMMARY
          echo "- Gas-optimized Receipt system (312 bits vs 440 bits)" >> $GITHUB_STEP_SUMMARY
          echo "- SafeERC20 for secure token transfers" >> $GITHUB_STEP_SUMMARY
          echo "- Role-based access control" >> $GITHUB_STEP_SUMMARY
          echo "- Referral system with 7% + 5% bonuses" >> $GITHUB_STEP_SUMMARY
          echo "- Emergency pause and withdrawal functions" >> $GITHUB_STEP_SUMMARY

  deploy-mainnet:
    name: Deploy to Polygon Mainnet (Production)
    runs-on: ubuntu-latest
    needs: test-and-security
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.base.ref == 'main'
    environment: production
    
    outputs:
      presale-address: ${{ steps.deploy.outputs.presale-address }}
      deployment-block: ${{ steps.deploy.outputs.deployment-block }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Pre-deployment checks
        run: |
          echo "Running pre-deployment validation..."
          
          # Validate all required secrets are set
          if [ -z "${{ secrets.POLYGON_MAINNET_PRIVATE_KEY }}" ]; then
            echo "POLYGON_MAINNET_PRIVATE_KEY not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.MAINNET_RECORDER_ADDRESS }}" ]; then
            echo "MAINNET_RECORDER_ADDRESS not set"
            exit 1
          fi
          
          # Check current gas prices
          echo "Checking current gas prices..."
          npx hardhat run --network polygon -e "
            const gasPrice = await ethers.provider.getGasPrice();
            console.log('Current gas price:', ethers.formatUnits(gasPrice, 'gwei'), 'gwei');
            if (gasPrice > ethers.parseUnits('100', 'gwei')) {
              console.log('High gas prices detected');
            }
          " || echo "Gas price check completed"

      - name: Deploy Presale to Polygon Mainnet
        id: deploy
        run: |
          echo "Deploying Presale Contract to Polygon Mainnet..."
          echo "This is a PRODUCTION deployment!"
          
          # Run deployment script (auto-detects Polygon and deploys presale)
          OUTPUT=$(npx hardhat run scripts/deploy.js --network polygon)
          echo "$OUTPUT"
          
          # Extract contract address from output
          PRESALE_ADDRESS=$(echo "$OUTPUT" | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
          
          if [ -z "$PRESALE_ADDRESS" ]; then
            echo "Failed to extract presale address"
            exit 1
          fi
          
          echo "Presale deployed to: $PRESALE_ADDRESS"
          
          # Get deployment block
          BLOCK_NUMBER=$(npx hardhat run --network polygon -e "console.log(await ethers.provider.getBlockNumber())")
          
          # Set outputs
          echo "presale-address=$PRESALE_ADDRESS" >> $GITHUB_OUTPUT
          echo "deployment-block=$BLOCK_NUMBER" >> $GITHUB_OUTPUT
          
          # Set environment variables for next steps
          echo "PRESALE_ADDRESS=$PRESALE_ADDRESS" >> $GITHUB_ENV
          echo "DEPLOYMENT_BLOCK=$BLOCK_NUMBER" >> $GITHUB_ENV
        env:
          POLYGON_DEPLOYER_PRIVATE_KEY: ${{ secrets.POLYGON_MAINNET_PRIVATE_KEY }}
          POLYGON_RPC_URL: ${{ secrets.POLYGON_MAINNET_RPC_URL }}
          RECORDER_ADDRESS: ${{ secrets.MAINNET_RECORDER_ADDRESS }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

      - name: Verify contract on Polygonscan
        run: |
          echo "Verifying contract on Polygonscan..."
          sleep 60  # Wait longer for mainnet indexing
          
          npx hardhat verify --network polygon $PRESALE_ADDRESS ${{ secrets.MAINNET_RECORDER_ADDRESS }}
        env:
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: presale-v${{ github.run_number }}
          release_name: "Presale Contract v${{ github.run_number }}"
          body: |
            # MAGAX Presale Contract - Production Deployment
            
            ## Deployment Details
            
            **Contract Address:** [`${{ env.PRESALE_ADDRESS }}`](https://polygonscan.com/address/${{ env.PRESALE_ADDRESS }})
            **Network:** Polygon Mainnet (Chain ID: 137)
            **Deployment Block:** ${{ env.DEPLOYMENT_BLOCK }}
            **Recorder Address:** `${{ secrets.MAINNET_RECORDER_ADDRESS }}`
            
            ## Stage Configuration
            
            | Stage | Price per MAGAX | Allocation | Status |
            |-------|----------------|------------|---------|
            | 1 | $0.00027 | 200M tokens |  Active |
            | 2 | $0.000293 | 21M tokens |  Pending |
            | 3 | $0.000318 | 22M tokens |  Pending |
            
            ## ⚡ Gas Optimizations
            
            - **Receipt Storage:** Reduced from 440 bits (3 slots) to 312 bits (2 slots)
            - **Event Optimization:** Removed redundant parameters
            - **Duplicate Prevention:** Removed for ~7k gas savings per purchase
            - **SafeERC20:** Secure token transfers with gas efficiency
            
            ## Security Features
            
            - **Role-based Access Control** - Admin and recorder roles
            - **Reentrancy Protection** - All state-changing functions protected
            - **Pausable Contract** - Emergency pause functionality
            - **SafeERC20 Transfers** - Secure token operations
            - **Input Validation** - Comprehensive parameter checking
            - **Emergency Withdrawal** - Admin token recovery functions
            
            ## Referral System
            
            - **Referrer Bonus:** 7% of purchased tokens
            - **Referee Bonus:** 5% of purchased tokens  
            - **Self-referral Protection:** Prevents gaming the system
            - **One-time Referrer Setting:** Immutable after first purchase
            
            ## Integration Guide
            
            ```javascript
            // Contract ABI and address for integration
            const PRESALE_ADDRESS = "${{ env.PRESALE_ADDRESS }}";
            const RECORDER_ROLE = "0x..." // Use contract.RECORDER_ROLE()
            
            // Record a purchase (only RECORDER_ROLE)
            await presale.recordPurchase(buyer, usdtAmount, magaxAmount);
            
            // Record purchase with referral
            await presale.recordPurchaseWithReferral(buyer, usdtAmount, magaxAmount, referrer);
            ```
            
            ## Important Notes
            
            - **Contract Address is Permanent** - Cannot be changed after deployment
            - **Recorder Role Required** - Only designated addresses can record purchases
            - **Stage Management** - Admin can configure and activate stages
            - **Emergency Controls** - Admin can pause contract in emergencies
            
            ---
            
            **Verification:** Contract verified on [Polygonscan](https://polygonscan.com/address/${{ env.PRESALE_ADDRESS }})
            **Security:** Analyzed with Slither and Mythril static analysis tools
          draft: false
          prerelease: false

      - name: Save production deployment
        run: |
          echo "Saving production deployment record..."
          
          # Create deployment directory
          mkdir -p deployments/polygon
          
          # Create comprehensive deployment record
          cat > deployments/polygon/presale-deployment.json << EOF
          {
            "contractAddress": "$PRESALE_ADDRESS",
            "network": "polygon",
            "chainId": 137,
            "deploymentBlock": $DEPLOYMENT_BLOCK,
            "deploymentDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "GitHub Actions",
            "recorderAddress": "${{ secrets.MAINNET_RECORDER_ADDRESS }}",
            "releaseTag": "presale-v${{ github.run_number }}",
            "verified": true,
            "gasOptimized": true,
            "securityAnalyzed": true,
            "features": [
              "SafeERC20 transfers",
              "Role-based access control", 
              "Gas-optimized receipts (312 bits)",
              "Referral system (7% + 5%)",
              "Stage-based pricing",
              "Emergency pause controls",
              "Reentrancy protection"
            ],
            "stages": {
              "1": { "price": "0.00027", "allocation": "200000000", "status": "active" },
              "2": { "price": "0.000293", "allocation": "21000000", "status": "pending" },
              "3": { "price": "0.000318", "allocation": "22000000", "status": "pending" }
            }
          }
          EOF
          
          # Create env file for easy integration
          echo "PRESALE_ADDRESS=$PRESALE_ADDRESS" > deployments/polygon/addresses.env
          echo "DEPLOYMENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployments/polygon/addresses.env
          echo "DEPLOYMENT_BLOCK=$DEPLOYMENT_BLOCK" >> deployments/polygon/addresses.env
          echo "RELEASE_TAG=presale-v${{ github.run_number }}" >> deployments/polygon/addresses.env
          
          # Commit to main branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions Bot"
          git add deployments/
          git commit -m "Production presale deployment v${{ github.run_number }}: $PRESALE_ADDRESS"
          git push origin main

      - name: Production deployment summary
        run: |
          echo "## Production Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Presale Contract:** [\`$PRESALE_ADDRESS\`](https://polygonscan.com/address/$PRESALE_ADDRESS)" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Polygon Mainnet (Chain ID: 137)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Block:** $DEPLOYMENT_BLOCK" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [presale-v${{ github.run_number }}](https://github.com/${{ github.repository }}/releases/tag/presale-v${{ github.run_number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Update frontend with new contract address" >> $GITHUB_STEP_SUMMARY
          echo "- Configure recorder role for purchase system" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor initial transactions" >> $GITHUB_STEP_SUMMARY
          echo "- Activate additional stages as needed" >> $GITHUB_STEP_SUMMARY
